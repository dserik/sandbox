<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>
    <parent>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-starter-parent</artifactId>
        <version>2.2.0.M5</version>
        <relativePath/> <!-- lookup parent from repository -->
    </parent>
    <groupId>org.test</groupId>
    <artifactId>spring-sandbox</artifactId>
    <version>0.0.1-SNAPSHOT</version>
    <name>spring-sandbox</name>
    <description>Demo project for Spring Boot</description>

    <properties>
        <java.version>1.8</java.version>
        <spring.datasource.driverClassName>org.postgresql.Driver</spring.datasource.driverClassName>
        <spring.datasource.url>jdbc:postgresql://localhost:5432/test_db?autoReconnect=true&amp;useUnicode=yes&amp;characterEncoding=UTF-8</spring.datasource.url>
        <spring.datasource.username>postgres</spring.datasource.username>
        <spring.datasource.password>example</spring.datasource.password>
    </properties>

    <dependencies>
        <dependency>
            <groupId>io.jsonwebtoken</groupId>
            <artifactId>jjwt</artifactId>
            <version>0.9.1</version>
        </dependency>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-data-jpa</artifactId>
        </dependency>
        <dependency>
            <groupId>org.reactivestreams</groupId>
            <artifactId>reactive-streams</artifactId>
        </dependency>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-hateoas</artifactId>
        </dependency>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-jooq</artifactId>
        </dependency>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-web</artifactId>
        </dependency>

        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-devtools</artifactId>
            <scope>runtime</scope>
            <optional>true</optional>
        </dependency>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-configuration-processor</artifactId>
            <optional>true</optional>
        </dependency>
        <dependency>
            <groupId>org.postgresql</groupId>
            <artifactId>postgresql</artifactId>
            <scope>runtime</scope>
        </dependency>
        <dependency>
            <groupId>org.projectlombok</groupId>
            <artifactId>lombok</artifactId>
            <optional>true</optional>
        </dependency>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-test</artifactId>
            <scope>test</scope>
            <exclusions>
                <exclusion>
                    <groupId>org.junit.vintage</groupId>
                    <artifactId>junit-vintage-engine</artifactId>
                </exclusion>
            </exclusions>
        </dependency>
    </dependencies>

    <build>
        <plugins>
            <plugin>
                <!-- Specify the maven code generator plugin -->
                <!-- Use org.jooq            for the Open Source Edition             org.jooq.pro        for commercial editions,             org.jooq.pro-java-6 for commercial editions with Java 6 support,             org.jooq.trial      for the free trial edition         Note: Only the Open Source Edition is hosted on Maven Central.               Import the others manually from your distribution -->
                <groupId>org.jooq</groupId>
                <artifactId>jooq-codegen-maven</artifactId>

                <executions>
                    <execution>
                        <id>jooq-codegen</id>
                        <phase>generate-sources</phase>
                        <goals>
                            <goal>generate</goal>
                        </goals>
                    </execution>
                </executions>

                <configuration>
                    <!-- Configure the database connection here -->
                    <jdbc>
                        <driver>${spring.datasource.driverClassName}</driver>
                        <url>${spring.datasource.url}</url>
                        <user>postgres</user>
                        <password>example</password>
                    </jdbc>

                    <generator>
                        <!-- The default code generator. You can override this one, to generate your own code style.
                        Supported generators:
                         - org.jooq.codegen.JavaGenerator
                         - org.jooq.codegen.ScalaGenerator
                          Defaults to org.jooq.codegen.JavaGenerator -->
                        <name>org.jooq.codegen.JavaGenerator</name>
                        <database>
                            <!-- The database type. The format here is:
                            org.util.[database].[database]Database -->
<!--                            <name>org.jooq.meta.mariadb.MariaDBDatabase</name>-->
                            <!-- The database schema (or in the absence of schema support, in your RDBMS this
                            can be the owner, user, database name) to be generated -->
                            <inputSchema>public</inputSchema>
                            <!-- All elements that are generated from your schema
                            (A Java regular expression. Use the pipe to separate several expressions)
                             Watch out for case-sensitivity. Depending on your database, this might be important! -->
                            <includes>.*</includes>
                            <!-- All elements that are excluded from your schema
                            (A Java regular expression. Use the pipe to separate several expressions).
                            Excludes match before includes, i.e. excludes have a higher priority -->
                            <excludes>
                            </excludes>
                        </database>
                        <target>
                            <!-- The destination package of your generated classes (within the destination directory) -->
                            <packageName>net.hiew.jooqtutorial.generated</packageName>
                            <!-- The destination directory of your generated classes. Using Maven directory layout here -->
                            <directory>/home/daryn/IdeaProjects/spring-sandbox/target/generated/</directory>
                        </target>
                    </generator>

                </configuration>

            </plugin>
        </plugins>
    </build>

    <repositories>
        <repository>
            <id>spring-milestones</id>
            <name>Spring Milestones</name>
            <url>https://repo.spring.io/milestone</url>
        </repository>
        <repository>
            <snapshots>
                <enabled>false</enabled>
            </snapshots>
            <id>bintray-andimarek-graphql-java</id>
            <name>bintray</name>
            <url>http://dl.bintray.com/andimarek/graphql-java</url>
        </repository>
    </repositories>
    <pluginRepositories>
        <pluginRepository>
            <id>spring-milestones</id>
            <name>Spring Milestones</name>
            <url>https://repo.spring.io/milestone</url>
        </pluginRepository>
    </pluginRepositories>

</project>
